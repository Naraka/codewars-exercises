# Digital root is the recursive sum of all the digits in a number.

# Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. The input will be a non-negative integer.

# Examples
#     16  -->  1 + 6 = 7
#    942  -->  9 + 4 + 2 = 15  -->  1 + 5 = 6
# 132189  -->  1 + 3 + 2 + 1 + 8 + 9 = 24  -->  2 + 4 = 6
# 493193  -->  4 + 9 + 3 + 1 + 9 + 3 = 29  -->  2 + 9 = 11  -->  1 + 1 = 2

def digital_root(n):
    def sum_number(n):
        numbers = 0
        for i in str(n):
            numbers+= int(i)
        return numbers
    result = sum_number(n)
    while len(str(result)) > 1:
        result = sum_number(result)
    return result

def digital_root(n):
    root = 0
    for d in str(n):
        root += int(d)
    if len(str(root)) > 1:
        root = digital_root(root)
    return root

print(digital_root(493193))
print(digital_root(123))
print(digital_root(34))
print(digital_root(1))
print(digital_root(653465446546564))
print(digital_root(98478972592727277227927927924686246242626426))
print(digital_root(12984948489))
print(digital_root(16))